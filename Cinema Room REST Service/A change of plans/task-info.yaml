type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    plugins {
        id 'java'
        id 'org.springframework.boot' version '2.3.1.RELEASE'
        id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    }

    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";

        private static final Gson gson = new Gson();

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    public class Seat {
        private int row;
        private int column;
        private int price;


        public Seat(int row, int column){
            this.row = row;
            this.column = column;
            this.price = row <= 4 ? 10 : 8;
                }

        public int getPrice() {return price;}

        public void setPrice(int price) {this.price = price;}

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }


    }
  learner_created: true
- name: src/cinema/CinemaSeats.java
  visible: true
  text: |
    package cinema;

    import java.util.ArrayList;

    public class CinemaSeats {
        private int total_rows;
        private int total_columns;
        private ArrayList<Seat> available_seats = new ArrayList<>();

        public CinemaSeats(int x, int y) {
            this.total_rows = x;
            this.total_columns = y;
            ArrayList<Seat> temp = new ArrayList<>();
            for (int i = 1; i < x + 1; i++) {
                for (int j = 1; j < y + 1; j++) {
                    temp.add(new Seat(i, j));
                }
            }
            setAvailable_seats(temp);
        }

        public ArrayList<Seat> getAvailable_seats() {
            return this.available_seats;
        }

        public void setAvailable_seats(ArrayList<Seat> available_seats) {
            this.available_seats = available_seats;
        }

        public Seat getSeat(int col, int row) {
            for (Seat seat : available_seats) {
                if (seat.getRow() == col && seat.getColumn() == row) {
                    return seat;
                }
            }
            return null;
        }

        public Seat removeSeat(int row, int col) {
            for (Seat s : available_seats) {
                if (s.getRow() == row && s.getColumn() == col) {
                    Seat se = new Seat(row, col);
                    available_seats.remove(s);
                    return se;
                }
            }
            return null;
        }

        public boolean isAvilable(int row, int col) {
            for (Seat s : available_seats) {
                if (s.getRow() == row && s.getColumn() == col) {
                    return true;
                }
            }
            return false;
        }

        public int getTotal_rows() {
            return total_rows;
        }

        public void setTotal_rows(int total_rows) {
            this.total_rows = total_rows;
        }

        public int getTotal_columns() {
            return total_columns;
        }

        public void setTotal_columns(int total_columns) {
            this.total_columns = total_columns;
        }
    }
  learner_created: true
- name: src/cinema/SeatRequest.java
  visible: true
  text: |-
    package cinema;

    public class SeatRequest {
        private int row;
        private int column;

        public SeatRequest() {}

        public int getRow() {
            return row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public void setRow(int row) {
            this.row = row;
        }
    }
  learner_created: true
- name: src/cinema/ErrorInfo.java
  visible: true
  text: |-
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;
    import org.springframework.http.HttpStatus;
    import org.springframework.web.bind.annotation.ExceptionHandler;
    import org.springframework.web.bind.annotation.ResponseStatus;
    import org.springframework.web.server.ResponseStatusException;


    public class ErrorInfo {


        private String error;

        public ErrorInfo(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }
    }
  learner_created: true
- name: src/cinema/RestController.java
  visible: true
  text: |-
    package cinema;

    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.*;
    import org.springframework.web.server.ResponseStatusException;

    @RestController
    public class ResCntrl {

        CinemaSeats as = new CinemaSeats(9, 9);

        @GetMapping("/seats")
        public CinemaSeats getAvailableSeats() {
            return this.as;
        }

        @PostMapping("/purchase")
        public ResponseEntity<?> purchaseSeat(@RequestBody SeatRequest request) {
           int r = request.getRow();
           int c = request.getColumn();
            try {
                if (r <= 9 && c <= 9 && r > 0 && c > 0) {
                    if (as.isAvilable(r, c)) {
                        return new ResponseEntity<>(as.removeSeat(r, c), HttpStatus.OK);
                    } else {
                        return new ResponseEntity<>(new ErrorInfo("The ticket has been already purchased!")
                                ,HttpStatus.BAD_REQUEST);
                    }
                } else {
                    return new ResponseEntity<>(new ErrorInfo("The number of a row or a column is out of bounds!"),
                            HttpStatus.BAD_REQUEST);
                }
            }
            catch(Exception e) {
                return new ResponseEntity<>(new ErrorInfo("Something else went wrong in the postmapper"),
                        HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/Purchase.java
  visible: true
  learner_created: true
- name: src/cinema/PurchaseHandler.java
  visible: true
  learner_created: true
- name: src/cinema/TokenRequest.java
  visible: true
  learner_created: true
- name: src/cinema/Returned_Ticket.java
  visible: true
  learner_created: true
- name: src/cinema/Purchase_Return.java
  visible: true
  learner_created: true
- name: src/cinema/StatsForTheManager.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/947/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Thu, 02 Sep 2021 09:31:03 UTC
record: 3
